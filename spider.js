'use strict';
// 干掉前六个
// 引入模块
var http = require('http');
var fs = require('fs');
var path = require('path');
var cheerio = require('cheerio');
var xlsx = require('node-xlsx');

var a = ["0.0.1", "0.0.10", "0.0.11", "0.0.12", "0.0.13", "0.0.14", "0.0.15", "0.0.16", "0.0.17", "0.0.18", "0.0.19", "0.0.2", "0.0.20", "0.0.21", "0.0.22", "0.0.23", "0.0.24", "0.0.25", "0.0.25.1", "0.0.25.1-fix", "0.0.25.10-fix", "0.0.25.11-fix", "0.0.25.12-fix", "0.0.25.13-fix", "0.0.25.14-fix", "0.0.25.15-fix", "0.0.25.16-fix", "0.0.25.17-fix", "0.0.25.18-fix", "0.0.25.19-fix", "0.0.25.2", "0.0.25.2-fix", "0.0.25.20-fix", "0.0.25.21-fix", "0.0.25.22-fix", "0.0.25.23-fix", "0.0.25.24-fix", "0.0.25.25-fix", "0.0.25.3", "0.0.25.3-fix", "0.0.25.4-fix", "0.0.25.5", "0.0.25.5-fix", "0.0.25.6", "0.0.25.6-fix", "0.0.25.7-fix", "0.0.25.8-fix", "0.0.25.9-fix", "0.0.26", "0.0.27", "0.0.3", "0.0.4", "0.0.5", "0.0.6", "0.0.8", "0.0.9", "0.1.0", "0.1.1", "0.1.10", "0.1.11", "0.1.12", "0.1.13", "0.1.14", "0.1.15", "0.1.16", "0.1.16.1", "0.1.17", "0.1.18", "0.1.19", "0.1.2", "0.1.20", "0.1.21", "0.1.22", "0.1.22.1", "0.1.22.2", "0.1.22.3", "0.1.23", "0.1.24", "0.1.25", "0.1.25.1", "0.1.26", "0.1.26.1", "0.1.26.2", "0.1.27", "0.1.28", "0.1.29", "0.1.3", "0.1.30", "0.1.30.1", "0.1.31", "0.1.32", "0.1.32.1", "0.1.33", "0.1.34", "0.1.35", "0.1.36", "0.1.37", "0.1.4", "0.1.4.1", "0.1.4.2", "0.1.4.3", "0.1.4.4", "0.1.40", "0.1.41", "0.1.5", "0.1.6", "0.1.7", "0.1.8", "0.1.8.1", "0.1.9", "0.2.0", "0.2.1", "0.2.10", "0.2.11", "0.2.12", "0.2.13", "0.2.14", "0.2.15", "0.2.16", "0.2.17", "0.2.18", "0.2.19", "0.2.2", "0.2.2.1", "0.2.2.2", "0.2.2.3", "0.2.2.4", "0.2.2.5", "0.2.2.6", "0.2.20", "0.2.21", "0.2.22", "0.2.22.1", "0.2.23", "0.2.23.1", "0.2.24", "0.2.24.1", "0.2.25", "0.2.26", "0.2.27", "0.2.28", "0.2.29", "0.2.3", "0.2.30", "0.2.31", "0.2.4", "0.2.5", "0.2.6", "0.2.7", "0.2.8", "0.2.9", "0.3.0", "0.3.1", "0.3.10", "0.3.11", "0.3.11.2", "0.3.11.3", "0.3.12", "0.3.13", "0.3.14", "0.3.15", "0.3.16", "0.3.16.1", "0.3.17", "0.3.17.1", "0.3.18", "0.3.19", "0.3.2", "0.3.20", "0.3.21", "0.3.22", "0.3.3", "0.3.4", "0.3.5", "0.3.6", "0.3.7", "0.3.7.1", "0.3.8", "0.3.9", "0.4.0", "0.4.1", "0.4.10", "0.4.11", "0.4.12", "0.4.13", "0.4.14", "0.4.15", "0.4.16", "0.4.16.1", "0.4.16.2", "0.4.16.3", "0.4.16.4", "0.4.16.5", "0.4.16.6", "0.4.17", "0.4.18", "0.4.19", "0.4.2", "0.4.20", "0.4.21", "0.4.22", "0.4.23", "0.4.23.1", "0.4.24", "0.4.25", "0.4.26", "0.4.27", "0.4.28", "0.4.29", "0.4.3", "0.4.30", "0.4.31", "0.4.32", "0.4.33", "0.4.34", "0.4.35", "0.4.36", "0.4.37", "0.4.38", "0.4.39", "0.4.4", "0.4.40", "0.4.41", "0.4.42", "0.4.43", "0.4.43.1", "0.4.44", "0.4.45", "0.4.45.1", "0.4.46", "0.4.46.1", "0.4.46.2", "0.4.46.3", "0.4.46.4", "0.4.46.5", "0.4.47", "0.4.47.11", "0.4.48", "0.4.48.1", "0.4.49", "0.4.49.1", "0.4.49.2", "0.4.49.3", "0.4.49.4", "0.4.5", "0.4.6", "0.4.7", "0.4.8", "0.4.9", "0.4.9.1", "0.5.0", "0.5.1", "0.5.10", "0.5.11", "0.5.12", "0.5.13", "0.5.14", "0.5.15", "0.5.16", "0.5.17", "0.5.18", "0.5.19", "0.5.2", "0.5.20", "0.5.21", "0.5.22", "0.5.23", "0.5.23.1", "0.5.24", "0.5.25", "0.5.26", "0.5.27", "0.5.28", "0.5.28.1", "0.5.29", "0.5.3", "0.5.30", "0.5.30.1", "0.5.30.2", "0.5.30.3", "0.5.30.4", "0.5.30.5", "0.5.31", "0.5.31.1", "0.5.4", "0.5.5", "0.5.6", "0.5.7", "0.5.8", "0.5.9", "0.6.0", "0.6.1", "0.6.10", "0.6.11", "0.6.12", "0.6.13", "0.6.14", "0.6.15", "0.6.16", "0.6.17", "0.6.18", "0.6.19", "0.6.2", "0.6.20", "0.6.21", "0.6.22", "0.6.23", "0.6.24", "0.6.24.1", "0.6.25", "0.6.26", "0.6.27", "0.6.28", "0.6.28.1", "0.6.29", "0.6.3", "0.6.30", "0.6.31", "0.6.32", "0.6.33", "0.6.34", "0.6.35", "0.6.36", "0.6.37", "0.6.38", "0.6.39", "0.6.39.1", "0.6.39.2", "0.6.39.3", "0.6.4", "0.6.40", "0.6.40.1", "0.6.41", "0.6.43", "0.6.5", "0.6.6", "0.6.7", "0.6.8", "0.6.9", "0.7.0", "0.7.1", "0.7.10", "0.7.11", "0.7.12", "0.7.13", "0.7.2", "0.7.3", "0.7.4", "0.7.5", "0.7.6", "0.7.6-snapshot", "0.7.7", "0.7.8", "0.7.9", "0.7.9.2", "11.0.1", "11.0.10", "11.0.11", "11.0.12", "11.0.13", "11.0.14", "11.0.15", "11.0.16", "11.0.17", "11.0.18", "11.0.19", "11.0.2", "11.0.20", "11.0.20.1", "11.0.21", "11.0.3", "11.0.4", "11.0.5", "11.0.6", "11.0.7", "11.0.8", "11.0.9", "11.1.1", "11.1.10", "11.1.10.1", "11.1.11", "11.1.12", "11.1.13", "11.1.13.2", "11.1.14", "11.1.14.1", "11.1.14.2", "11.1.2", "11.1.3", "11.1.4", "11.1.5", "11.1.6", "11.1.7", "11.1.8", "11.1.9", "11.2.1", "11.2.10", "11.2.11", "11.2.12", "11.2.2", "11.2.3", "11.2.4", "11.2.5", "11.2.6", "11.2.7", "11.2.8", "11.2.9", "11.3.1", "11.3.2", "11.3.3", "11.3.4"]

a = a.map(item => {
    return item.split('.').map(elem => parseInt(elem, 10))
})
// 0.1.8
a = a.filter(item => {
    if (item[0] === 0 && ((item[1] === 0) || (item[1] <= 1 && item[2] <= 7))) {
        return false
    } else {
        return true
    }
})

a = a.map(item => {
    return item.join('.')
})

var list = []
for (let i = 0; i < a.length; i++) {
    // 爬虫的 URL 信息
    var opt = 

    // 创建 http get 请求
    http.get(opt, function (res) {
        var html = ''; // 保存抓取到的 HTML 源码
        var movies = [];  // 保存解析 HTML 后的数据，即我们需要的电影信息

        // 前面说过
        // 这里的 res 是 Class: http.IncomingMessage 的一个实例
        // 而 http.IncomingMessage 实现了 stream.Readable 接口
        // 所以 http.IncomingMessage 也有 stream.Readable 的事件和方法
        // 比如 Event: 'data', Event: 'end', readable.setEncoding() 等

        // 设置编码
        res.setEncoding('utf-8');

        // 抓取页面内容
        res.on('data', function (chunk) {
            html += chunk;
        });

        res.on('end', function () {
            // 使用 cheerio 加载抓取到的 HTML 代码
            // 然后就可以使用 jQuery 的方法了
            // 比如获取某个 class：$('.className')
            // 这样就能获取所有这个 class 包含的内容
            var $ = cheerio.load(html);
            var date = new Date(parseInt($('uploaded').html()));
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            monthSave({
                month: month,
                size: $('size').html(),
                version: a[i]
            })

            if(month < 10) month = '0' + month
            if(day < 10) day = '0' + day
            
            console.log(a[i], $('size').html(), '' + year + '/' + month + '/' + day)
            list.push([
                a[i],
                $('size').html(),
                '' + year + '/' + month + '/' + day
            ])
        });
    }).on('error', function (err) {
        console.log(err);
    })
}

var month = {}

for(let i = 1; i < 13; i++) {
    month[i] = {
        num: 0,
        size: 0
    }
}
function monthSave(data) {
    var obj = month[data.month]
    obj.num++
    obj.size += parseInt(data.size)
}

setTimeout(() => {
    let buf = xlsx.build([{name: 'hhh'}, {data: list}]);
    // 将 buffer 写入到 my.xlsx 中（导出）
    fs.writeFile('my.xlsx', buf, (err)=> {
        if(err) throw err;
        console.log('File is saved!');
    });
}, 10000);

// setTimeout(() => {
//     console.log(month)
//     let list = []
    
//     for(let i = 1; i < 13; i++) {
//         list.push([i, month[i].size / month[i].num])
//     }
//     let buf = xlsx.build([{name: 's2'}, {data: list}]);
//     // 将 buffer 写入到 my.xlsx 中（导出）
//     fs.writeFile('my.xlsx', buf, (err)=> {
//         if(err) throw err;
//         console.log('File is saved!');
//     });
// }, 10000);

